/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DeKnowPaperInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "getAuthors(uint256)": FunctionFragment;
    "getReferences(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "publishPaper(string)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setInternal(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateAuthors(uint256,uint256[])": FunctionFragment;
    "updatePaper(uint256,string)": FunctionFragment;
    "updateReferences(uint256,uint256[])": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferences",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "publishPaper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setInternal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthors",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaper",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferences",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuthors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishPaper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AuthorAdded(uint256,uint256,address)": EventFragment;
    "AuthorRemoved(uint256,uint256,address)": EventFragment;
    "PaperPublished(address,uint256,string)": EventFragment;
    "PaperPublished2(uint256,address,uint256)": EventFragment;
    "PaperPublished3(uint256,uint256,address)": EventFragment;
    "PaperUpdated(uint256,uint256,address,string)": EventFragment;
    "PaperUpdated2(uint256,uint256,address)": EventFragment;
    "ReferenceAdded(uint256,uint256,address)": EventFragment;
    "ReferenceRemoved(uint256,uint256,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaperPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaperPublished2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaperPublished3"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaperUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaperUpdated2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferenceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferenceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class DeKnowPaper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DeKnowPaperInterface;

  functions: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getAuthors(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getAuthors(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    getReferences(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "getReferences(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    publishPaper(
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "publishPaper(string)"(
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInternal(
      memberContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInternal(address)"(
      memberContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    updateAuthors(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAuthors(uint256,uint256[])"(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePaper(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePaper(uint256,string)"(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateReferences(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateReferences(uint256,uint256[])"(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAuthors(
    paperId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAuthors(uint256)"(
    paperId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getReferences(
    paperId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getReferences(uint256)"(
    paperId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  publishPaper(
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "publishPaper(string)"(
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInternal(
    memberContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInternal(address)"(
    memberContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAuthors(
    paperId: BigNumberish,
    authors: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAuthors(uint256,uint256[])"(
    paperId: BigNumberish,
    authors: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePaper(
    paperId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePaper(uint256,string)"(
    paperId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateReferences(
    paperId: BigNumberish,
    references: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateReferences(uint256,uint256[])"(
    paperId: BigNumberish,
    references: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAuthors(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAuthors(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getReferences(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getReferences(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    publishPaper(
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "publishPaper(string)"(
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInternal(
      memberContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInternal(address)"(
      memberContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAuthors(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAuthors(uint256,uint256[])"(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePaper(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePaper(uint256,string)"(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferences(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateReferences(uint256,uint256[])"(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    AuthorAdded(paperId: null, memberId: null, byAuthor: null): EventFilter;

    AuthorRemoved(paperId: null, memberId: null, byAuthor: null): EventFilter;

    PaperPublished(author: null, memberId: null, tokenURI: null): EventFilter;

    PaperPublished2(paperId: null, author: null, memberId: null): EventFilter;

    PaperPublished3(memberId: null, paperId: null, author: null): EventFilter;

    PaperUpdated(
      paperId: null,
      memberId: null,
      author: null,
      tokenURI: null
    ): EventFilter;

    PaperUpdated2(memberId: null, paperId: null, author: null): EventFilter;

    ReferenceAdded(
      paperId: null,
      refPaperId: null,
      byAuthor: null
    ): EventFilter;

    ReferenceRemoved(
      paperId: null,
      refPaperId: null,
      byAuthor: null
    ): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthors(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuthors(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferences(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReferences(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishPaper(tokenURI: string, overrides?: Overrides): Promise<BigNumber>;

    "publishPaper(string)"(
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInternal(
      memberContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInternal(address)"(
      memberContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAuthors(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAuthors(uint256,uint256[])"(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePaper(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePaper(uint256,string)"(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateReferences(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateReferences(uint256,uint256[])"(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthors(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuthors(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferences(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReferences(uint256)"(
      paperId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishPaper(
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "publishPaper(string)"(
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInternal(
      memberContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInternal(address)"(
      memberContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAuthors(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAuthors(uint256,uint256[])"(
      paperId: BigNumberish,
      authors: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePaper(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePaper(uint256,string)"(
      paperId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateReferences(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateReferences(uint256,uint256[])"(
      paperId: BigNumberish,
      references: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
